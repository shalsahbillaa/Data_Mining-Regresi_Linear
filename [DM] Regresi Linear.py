# -*- coding: utf-8 -*-
"""[DM] Regresi Linier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UOkmup5yN90gyQGxK9jdQALm9RJS5KLw

Regresi Linier : Supervised learning, estimasi, time series, numerikal, pola berupa rumus, melihat eror yang ditimbulkan dari estimasi
"""

import numpy as np
import pandas as pd

"""###**DATA TRAINING**"""

df_train = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Data Mining/Data/heatingOilTrainingset.csv")
df_train.head()

df_train.info()

"""####Preprocessing"""

df = pd.DataFrame(df_train)
df

"""avg_age menggunakan float, maka akan dibulatkan"""

age = df['Avg_Age'].astype(int)

df['Avg_Age'] = age
df

df = df.rename(columns = {'Avg_Age' : 'avg_age'})
df

"""menghubungkan 5 atribut dengan analisis kolerasi"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

#L
f, ax = plt.subplots(figsize=(10,10))
plt.title = ('Pearson Correlation')
sns.heatmap(df.astype(float).corr(),
            linewidth = 0.25,
            vmax = 1.0,
            square = True,
            linecolor ='black',
            annot = True)

"""semakin mendekati 1 semakin kuat hubungannya"""

#sama kaya yang diatas
f, ax = plt.subplots(figsize=(10,10))
plt.title = ('Pearson Correlation')
sns.heatmap(df.astype(float).corr(),
            linewidth = 0.25,
            vmax = 1.0,
            square = True,
            linecolor ='black',
            annot = True,
            cmap = 'PuBuGn') #cmap untuk warna

"""####Modeling"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

df.head()

x = df[['Insulation', 'Temperature', 'avg_age', 'Num_Occupants',	'Home_Size']]
x.head()

#target yang akan diprediksi
y = df['Heating_Oil']
y.head()

#split data train dan test dengan perbandingan 70%:30%
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3, random_state = 0)

regressor = LinearRegression()
regressor.fit(x_train, y_train)

print(regressor.intercept_) #paramater linear regression
print(regressor.coef_) #koofisien yang akakn dicari nantinya

"""####Predict Value"""

#diarahkan ke x_test
y_pred = regressor.predict(x_test)

#ukuran/panjnagnya sama kaya x_test
y_pred.shape

y_pred

df = pd.DataFrame({'Actual' : y_test, 'Predict' : y_pred})
df

"""####Evaluasi Model Perfrmance Metrics

Semakin rendah MAE semakin bagus
"""

print('Mean Absolut Eror (MAE) : ', metrics.mean_absolute_error(y_test, y_pred).round(2)) #round untuk mengambil angka dibelakang koma
print('Mean Absolut Eror : ', metrics.mean_absolute_percentage_error(y_test, y_pred).round(3)) 
print('Mean Squared Eror : ', metrics.mean_squared_error(y_test, y_pred).round(3))
print('Root Mean Squared Eror (MAE) : ', np.sqrt(metrics.mean_squared_error(y_test, y_pred).round(3))) #pembulatan angka
print('r2_Score : ', metrics.r2_score(y_test, y_pred))

"""####Visualisasi"""

x = y_test
y = y_pred

m, b = np.polyfit(x,y,1) #m=sLope, b=intercept
plt.plot(x, m*x+b)

plt.plot(x,y, 'o')

m, b = np.polyfit(x,y,1) #m=sLope, b=intercept
plt.plot(x, m*x+b)

"""###**DATA TESTING**"""

data_testing = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Data Mining/Data/heatingOilTestingset.csv")
data_testing.head()

df_testing = pd.DataFrame(data_testing)
df_testing.head()

age = df_testing['Avg_Age'].astype(int)
df_testing['Avg_Age'] = age
df_testing.head()

x1 = df_testing[['Insulation', 'Temperature', 'Avg_Age', 'Num_Occupants',	'Home_Size']]
x1.head()

testing_pred = regressor.predict(x1)
testing_pred

#data frame hasil prediksi
df_test_predict = pd.DataFrame({'Predicted' : testing_pred}) #kolom heating oil
df_test_predict

df_result_pred = pd.concat([df_testing, df_test_predict],
                            ignore_index = False, sort = False, axis = 1)
df_result_pred

x = df_result_pred.to_excel('Result Predict Heating Oil.xlsx', sheet_name="Sheet1")
x

